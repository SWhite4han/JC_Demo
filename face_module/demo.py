import os
import json
import cv2
import config
import numpy as np
from matplotlib.font_manager import FontProperties
from PIL import Image
from pylab import *

font = FontProperties(fname=r"/usr/share/fonts/opentype/noto/NotoSansCJK-Light.ttc", size=14)

db_name = config.db_name
code_path = os.path.dirname(os.path.abspath(__file__))
path_root = '/data1/images/0821/manaulLabel/known_people_id'
name_hash_path = '/home/c11tch/workspace/PycharmProjects/JC_Demo/face_module/sir_db/info.json'
with open(name_hash_path, 'r') as f:
    name_hash = json.load(f)

# Read data
face_vectors = np.load(os.path.join(code_path, db_name, 'face_vectors2.npy'))
face_source = np.load(os.path.join(code_path, db_name, 'face_source2.npy'))
face_locations = np.load(os.path.join(code_path, db_name, 'face_locations2.npy'))


def transfer_path(old_path):
    file_name = old_path.split('/')
    folder = file_name[-2]
    file = file_name[-1]
    real_path = os.path.join(path_root, folder, file)
    return real_path


def show_img(img_path, img_title='', ms=5000):
    # img = cv2.imread(img_path)
    # cv2.imshow(img_title, img)
    # cv2.waitKey(ms)
    pil_im = Image.open(img_path)
    title(img_title, fontproperties=font)
    imshow(pil_im)
    show()


# target_vec = [0.03921874612569809, -0.09506630897521973, -0.08106917142868042, -0.033862143754959106, 0.21288776397705078, -0.0341658778488636, 0.1485113948583603, -0.040570080280303955, 0.13474132120609283, -0.1289537400007248, -0.034083329141139984, 0.03563404455780983, -0.059491243213415146, 0.02713354304432869, 0.05088447779417038, 0.015370207838714123, -0.023120813071727753, -0.09124986082315445, -0.05487494915723801, -0.002998130628839135, -0.01847977004945278, 0.06772126257419586, -0.011268429458141327, 0.015213937498629093, 0.1849854290485382, 0.06935539841651917, 0.02939126081764698, -0.12384314835071564, 0.08710169792175293, -0.03791430965065956, 0.056739840656518936, -0.01680596172809601, -0.07156244665384293, -0.011480532586574554, -0.018351735547184944, 0.07573271542787552, -0.020407583564519882, 0.006387912202626467, -0.07031535357236862, -0.012045496143400669, 0.025808781385421753, 0.18897366523742676, 0.12905393540859222, -0.01502098236232996, -0.11828265339136124, 0.10604889690876007, -0.09508258104324341, -0.026238998398184776, -0.14267891645431519, 0.25837600231170654, -0.03973231092095375, 0.09125027060508728, 0.15897367894649506, -0.0973871499300003, -0.01986946165561676, -0.12359786033630371, -0.055138375610113144, 0.08117605000734329, 0.12727141380310059, -0.03026808612048626, 0.0416719950735569, -0.02452945150434971, -0.0871526226401329, 0.1817568838596344, 0.05039545148611069, 0.06244925782084465, -0.013755756430327892, 0.008114232681691647, 0.08850853890180588, -0.07628493756055832, 0.04078437760472298, -0.13074861466884613, -0.0744004026055336, -0.19410590827465057, -0.034951888024806976, -0.03363273665308952, 0.09889083355665207, 0.05971548333764076, -0.1170651838183403, -0.04941261559724808, -0.16120858490467072, 0.16936597228050232, 0.02394290454685688, -0.029609156772494316, -0.0709984302520752, -0.06890726834535599, 0.1018911823630333, -0.031342603266239166, -0.013176849111914635, 0.030455267056822777, 0.02758750319480896, -0.045243896543979645, -0.05343509837985039, -0.04040913283824921, 0.03404076024889946, 0.05249208211898804, -0.06068211421370506, -0.10256879031658173, -0.07151151448488235, 0.15299667418003082, -0.0010051882127299905, 0.01147898007184267, 0.061753954738378525, -0.00012788909953087568, -0.10604562610387802, -0.006992593873292208, 0.08357350528240204, 0.0210945513099432, 0.01962556503713131, -0.10959495604038239, 0.057982347905635834, 0.03242998570203781, 0.22678707540035248, 0.07357490807771683, 0.14566408097743988, 0.0031226356513798237, -0.020346472039818764, 0.1580447107553482, 0.08871699124574661, -0.033972568809986115, 0.12342078238725662, -0.04413473606109619, 0.07484786212444305, -0.08762526512145996, 0.01286532822996378, -0.16138607263565063, 0.06846778094768524, 0.014511369168758392]
index = np.random.choice(len(face_vectors)-1)
target_vec = face_vectors[index]

path = transfer_path(face_source[index])
name = name_hash['id_to_name'][path.split('/')[-2]]
show_img(path, img_title='Target:{0}'.format(name))

score = []
for vec in face_vectors:
    score.append(np.linalg.norm(target_vec - vec))

# one minimal image
# idx = np.argmin(score)
# print(score[idx])
# print(face_source[idx])
# print(transfer_path(face_source[idx]))
# show_img(transfer_path(face_source[idx]), ms=3000)

# n minimal image
idx = np.argsort(score)[:8]
print(np.asarray(score)[idx])
print(face_source[idx])
for i, path_idx in enumerate(idx):
    path = transfer_path(face_source[path_idx])
    name = name_hash['id_to_name'][path.split('/')[-2]]
    show_img(path, img_title='Result{0}:{1}'.format(i, name), ms=3000)
